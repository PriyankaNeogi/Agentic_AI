{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "472272cf",
   "metadata": {},
   "source": [
    "### Problem Statement:\n",
    "Create a simple assistant that uses any LLM and should be pydantic, when we ask about any product it should give you two information product Name, product details tentative price in USD (integer). use chat Prompt Template.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "6f4ebd6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "# load the environmnet\n",
    "from dotenv import load_dotenv\n",
    "# initialise the environment\n",
    "load_dotenv()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "f5da5c3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# groq API\n",
    "os.environ[\"GROQ_API_KEY\"]=os.getenv(\"GROQ_API_KEY\")\n",
    "\n",
    "# os.environ[\"open_api_key\"]=os.getenv(\"open_api_key\")\n",
    "# langsmith tracking and tracing\n",
    "os.environ[\"LANGCHAIN_API_KEY\"]=os.getenv(\"LANGCHAIN_API_KEY\")\n",
    "os.environ[\"LANGCHAIN_PROJECT\"]=os.getenv(\"LANGCHAIN_PROJECT\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "023d9ae6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'product_name': 'Foldable Smartphone', 'product_details': 'Water-resistant, long-lasting battery, advanced camera system', 'tentative_price': 999.99}, {'product_name': 'Wireless Earbuds', 'product_details': 'Long battery life, water-resistant, easy pairing', 'tentative_price': 149.99}, {'product_name': 'Smartwatch', 'product_details': 'Heart rate monitoring, GPS tracking, customizable watch faces', 'tentative_price': 299.99}, {'product_name': 'High-Tech Headphones', 'product_details': 'Immersive sound, long battery life, comfortable design', 'tentative_price': 199.99}, {'product_name': 'Portable Power Bank', 'product_details': 'High-capacity battery, compact design, fast charging', 'tentative_price': 49.99}]\n"
     ]
    }
   ],
   "source": [
    "from langchain_core.prompts import ChatPromptTemplate\n",
    "from langchain_groq import ChatGroq\n",
    "from langchain_core.output_parsers import JsonOutputParser\n",
    "from pydantic import Field, BaseModel\n",
    "\n",
    "class Product(BaseModel):\n",
    "    product_name:str =Field(\"A product name\")\n",
    "    product_details: str =Field(\"A product details\")\n",
    "    tentative_price: int = Field(\"Tentative price of the product in USD\")\n",
    "\n",
    "\n",
    "\n",
    "output_parser5 = JsonOutputParser(pydantic_object=Product)\n",
    "\n",
    "model_2 = ChatGroq(\n",
    "    model=\"llama-3.1-8b-instant\"\n",
    ")\n",
    "\n",
    "\n",
    "prompt_7 = ChatPromptTemplate(\n",
    "    [\n",
    "        (\"system\", \"You are an expert AI engineer. Give output in JSON format\"),\n",
    "        (\"user\", \"{product}\")\n",
    "    ]\n",
    ")\n",
    "\n",
    "chain_7 = prompt_7 | model_2| output_parser5\n",
    "response7 = chain_7.invoke({\"product\":\"Give the product_name , Product_details, tentative_price in USD\"})\n",
    "print(response7)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7014d96",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
